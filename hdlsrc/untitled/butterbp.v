// -------------------------------------------------------------
// 
// File Name: hdlsrc/untitled/butterbp.v
// Created: 2020-12-08 09:38:13
// 
// Generated by MATLAB 9.9 and HDL Coder 3.17
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 0.1
// Target subsystem base rate: 0.1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        0.1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Out                           ce_out        0.1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: butterbp
// Source Path: untitled/butterbp
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module butterbp
          (clk,
           reset,
           clk_enable,
           In,
           ce_out,
           Out);


  input   clk;
  input   reset;
  input   clk_enable;
  input   signed [13:0] In;  // sfix14_En13
  output  ce_out;
  output  signed [17:0] Out;  // sfix18_En13


  wire enb;
  reg signed [13:0] In_1;  // sfix14_En13
  wire signed [15:0] scaleconst1;  // sfix16_En21
  reg signed [15:0] scaleconst1_1;  // sfix16_En21
  wire signed [29:0] scale1;  // sfix30_En34
  reg signed [29:0] scale1_1;  // sfix30_En34
  wire signed [33:0] scale1_2;  // sfix34_En34
  wire signed [15:0] scaletypeconvert1;  // sfix16_En16
  wire signed [39:0] inputconv1;  // sfix40_En29
  wire signed [15:0] coeff_a2_section1;  // sfix16_En14
  wire signed [15:0] coeff_a3_section1;  // sfix16_En14
  reg signed [15:0] typeconvert1_tap0;  // sfix16_En15
  reg signed [15:0] typeconvert1_tap1;  // sfix16_En15
  wire signed [31:0] a3mul1;  // sfix32_En29
  wire signed [39:0] a1sum1_cast2;  // sfix40_En29
  wire signed [15:0] typeconvert1;  // sfix16_En15
  wire signed [31:0] a2mul1;  // sfix32_En29
  wire signed [39:0] a2sum1_cast2;  // sfix40_En29
  wire signed [40:0] Sub_sub_cast;  // sfix41_En29
  wire signed [40:0] Sub_sub_cast_1;  // sfix41_En29
  wire signed [40:0] a2sum1_temp;  // sfix41_En29
  wire signed [39:0] a2sum1;  // sfix40_En29
  wire signed [40:0] Sub1_sub_cast;  // sfix41_En29
  wire signed [40:0] Sub1_sub_cast_1;  // sfix41_En29
  wire signed [40:0] a1sum1_temp;  // sfix41_En29
  wire signed [39:0] a1sum1;  // sfix40_En29
  wire signed [31:0] b1mul1;  // sfix32_En29
  wire signed [39:0] b1multypeconvert1;  // sfix40_En29
  reg signed [39:0] delayMatch_reg [0:1];  // sfix40 [2]
  wire signed [39:0] delayMatch_reg_next [0:1];  // sfix40_En29 [2]
  wire signed [39:0] b1multypeconvert1_1;  // sfix40_En29
  wire signed [15:0] kconst;  // sfix16_En14
  reg signed [15:0] kconst_1;  // sfix16_En14
  reg signed [15:0] delay_section1_1;  // sfix16_En15
  wire signed [31:0] b3mul1;  // sfix32_En29
  reg signed [31:0] b3mul1_1;  // sfix32_En29
  wire signed [39:0] adder_add_cast;  // sfix40_En29
  wire signed [39:0] b1sum1;  // sfix40_En29
  wire signed [15:0] section_result1;  // sfix16_En11
  reg signed [15:0] section_result1_1;  // sfix16_En11
  wire signed [15:0] scaleconst2;  // sfix16_En21
  reg signed [15:0] scaleconst2_1;  // sfix16_En21
  wire signed [31:0] scale2;  // sfix32_En32
  reg signed [31:0] scale2_1;  // sfix32_En32
  wire signed [33:0] scale2_2;  // sfix34_En34
  wire signed [15:0] scaletypeconvert2;  // sfix16_En16
  wire signed [39:0] inputconv2;  // sfix40_En29
  wire signed [15:0] coeff_a2_section2;  // sfix16_En14
  wire signed [15:0] coeff_a3_section2;  // sfix16_En14
  reg signed [15:0] typeconvert2_tap0;  // sfix16_En15
  reg signed [15:0] typeconvert2_tap1;  // sfix16_En15
  wire signed [31:0] a3mul2;  // sfix32_En29
  wire signed [39:0] a1sum2_cast2;  // sfix40_En29
  wire signed [15:0] typeconvert2;  // sfix16_En15
  wire signed [31:0] a2mul2;  // sfix32_En29
  wire signed [39:0] a2sum2_cast2;  // sfix40_En29
  wire signed [40:0] Sub2_sub_cast;  // sfix41_En29
  wire signed [40:0] Sub2_sub_cast_1;  // sfix41_En29
  wire signed [40:0] a2sum2_temp;  // sfix41_En29
  wire signed [39:0] a2sum2;  // sfix40_En29
  wire signed [40:0] Sub3_sub_cast;  // sfix41_En29
  wire signed [40:0] Sub3_sub_cast_1;  // sfix41_En29
  wire signed [40:0] a1sum2_temp;  // sfix41_En29
  wire signed [39:0] a1sum2;  // sfix40_En29
  wire signed [31:0] b1mul2;  // sfix32_En29
  wire signed [39:0] b1multypeconvert2;  // sfix40_En29
  reg signed [39:0] delayMatch1_reg [0:1];  // sfix40 [2]
  wire signed [39:0] delayMatch1_reg_next [0:1];  // sfix40_En29 [2]
  wire signed [39:0] b1multypeconvert2_1;  // sfix40_En29
  wire signed [15:0] kconst_2;  // sfix16_En14
  reg signed [15:0] kconst_3;  // sfix16_En14
  reg signed [15:0] delay_section2_1;  // sfix16_En15
  wire signed [31:0] b3mul2;  // sfix32_En29
  reg signed [31:0] b3mul2_1;  // sfix32_En29
  wire signed [39:0] adder1_add_cast;  // sfix40_En29
  wire signed [39:0] b1sum2;  // sfix40_En29
  wire signed [15:0] section_result2;  // sfix16_En11
  reg signed [15:0] section_result2_1;  // sfix16_En11
  wire signed [15:0] scaleconst3;  // sfix16_En21
  reg signed [15:0] scaleconst3_1;  // sfix16_En21
  wire signed [31:0] scale3;  // sfix32_En32
  reg signed [31:0] scale3_1;  // sfix32_En32
  wire signed [33:0] scale3_2;  // sfix34_En34
  wire signed [15:0] scaletypeconvert3;  // sfix16_En16
  wire signed [39:0] inputconv3;  // sfix40_En29
  wire signed [15:0] coeff_a2_section3;  // sfix16_En14
  wire signed [15:0] coeff_a3_section3;  // sfix16_En14
  reg signed [15:0] typeconvert3_tap0;  // sfix16_En15
  reg signed [15:0] typeconvert3_tap1;  // sfix16_En15
  wire signed [31:0] a3mul3;  // sfix32_En29
  wire signed [39:0] a1sum3_cast2;  // sfix40_En29
  wire signed [15:0] typeconvert3;  // sfix16_En15
  wire signed [31:0] a2mul3;  // sfix32_En29
  wire signed [39:0] a2sum3_cast2;  // sfix40_En29
  wire signed [40:0] Sub4_sub_cast;  // sfix41_En29
  wire signed [40:0] Sub4_sub_cast_1;  // sfix41_En29
  wire signed [40:0] a2sum3_temp;  // sfix41_En29
  wire signed [39:0] a2sum3;  // sfix40_En29
  wire signed [40:0] Sub5_sub_cast;  // sfix41_En29
  wire signed [40:0] Sub5_sub_cast_1;  // sfix41_En29
  wire signed [40:0] a1sum3_temp;  // sfix41_En29
  wire signed [39:0] a1sum3;  // sfix40_En29
  wire signed [31:0] b1mul3;  // sfix32_En29
  wire signed [39:0] b1multypeconvert3;  // sfix40_En29
  reg signed [39:0] delayMatch2_reg [0:1];  // sfix40 [2]
  wire signed [39:0] delayMatch2_reg_next [0:1];  // sfix40_En29 [2]
  wire signed [39:0] b1multypeconvert3_1;  // sfix40_En29
  wire signed [15:0] kconst_4;  // sfix16_En14
  reg signed [15:0] kconst_5;  // sfix16_En14
  reg signed [15:0] delay_section3_1;  // sfix16_En15
  wire signed [31:0] b3mul3;  // sfix32_En29
  reg signed [31:0] b3mul3_1;  // sfix32_En29
  wire signed [39:0] adder2_add_cast;  // sfix40_En29
  wire signed [39:0] b1sum3;  // sfix40_En29
  wire signed [15:0] section_result3;  // sfix16_En11
  reg signed [15:0] section_result3_1;  // sfix16_En11
  wire signed [15:0] scaleconst4;  // sfix16_En21
  reg signed [15:0] scaleconst4_1;  // sfix16_En21
  wire signed [31:0] scale4;  // sfix32_En32
  reg signed [31:0] scale4_1;  // sfix32_En32
  wire signed [33:0] scale4_2;  // sfix34_En34
  wire signed [15:0] scaletypeconvert4;  // sfix16_En16
  wire signed [39:0] inputconv4;  // sfix40_En29
  wire signed [15:0] coeff_a2_section4;  // sfix16_En14
  wire signed [15:0] coeff_a3_section4;  // sfix16_En14
  reg signed [15:0] typeconvert4_tap0;  // sfix16_En15
  reg signed [15:0] typeconvert4_tap1;  // sfix16_En15
  wire signed [31:0] a3mul4;  // sfix32_En29
  wire signed [39:0] a1sum4_cast2;  // sfix40_En29
  wire signed [15:0] typeconvert4;  // sfix16_En15
  wire signed [31:0] a2mul4;  // sfix32_En29
  wire signed [39:0] a2sum4_cast2;  // sfix40_En29
  wire signed [40:0] Sub6_sub_cast;  // sfix41_En29
  wire signed [40:0] Sub6_sub_cast_1;  // sfix41_En29
  wire signed [40:0] a2sum4_temp;  // sfix41_En29
  wire signed [39:0] a2sum4;  // sfix40_En29
  wire signed [40:0] Sub7_sub_cast;  // sfix41_En29
  wire signed [40:0] Sub7_sub_cast_1;  // sfix41_En29
  wire signed [40:0] a1sum4_temp;  // sfix41_En29
  wire signed [39:0] a1sum4;  // sfix40_En29
  wire signed [31:0] b1mul4;  // sfix32_En29
  wire signed [39:0] b1multypeconvert4;  // sfix40_En29
  reg signed [39:0] delayMatch3_reg [0:1];  // sfix40 [2]
  wire signed [39:0] delayMatch3_reg_next [0:1];  // sfix40_En29 [2]
  wire signed [39:0] b1multypeconvert4_1;  // sfix40_En29
  wire signed [15:0] kconst_6;  // sfix16_En14
  reg signed [15:0] kconst_7;  // sfix16_En14
  reg signed [15:0] delay_section4_1;  // sfix16_En15
  wire signed [31:0] b3mul4;  // sfix32_En29
  reg signed [31:0] b3mul4_1;  // sfix32_En29
  wire signed [39:0] adder3_add_cast;  // sfix40_En29
  wire signed [39:0] b1sum4;  // sfix40_En29
  wire signed [17:0] output_typeconvert;  // sfix18_En13


  assign enb = clk_enable;

  always @(posedge clk)
    begin : HwModeRegister_process
      if (reset == 1'b1) begin
        In_1 <= 14'sb00000000000000;
      end
      else begin
        if (enb) begin
          In_1 <= In;
        end
      end
    end



  assign scaleconst1 = 16'sb0100111100111001;


  always @(posedge clk)
    begin : HwModeRegister1_process
      if (reset == 1'b1) begin
        scaleconst1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          scaleconst1_1 <= scaleconst1;
        end
      end
    end



  assign scale1 = In_1 * scaleconst1_1;



  always @(posedge clk)
    begin : PipelineRegister_process
      if (reset == 1'b1) begin
        scale1_1 <= 30'sb000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          scale1_1 <= scale1;
        end
      end
    end



  assign scale1_2 = {{4{scale1_1[29]}}, scale1_1};



  assign scaletypeconvert1 = scale1_2[33:18] + $signed({1'b0, scale1_2[17] & (scale1_2[18] | (|scale1_2[16:0]))});



  assign inputconv1 = {{11{scaletypeconvert1[15]}}, {scaletypeconvert1, 13'b0000000000000}};



  assign coeff_a2_section1 = 16'sb1001100110000011;



  assign coeff_a3_section1 = 16'sb0011111110000101;



  always @(posedge clk)
    begin : delay_process_section1_tap1_process
      if (reset == 1'b1) begin
        typeconvert1_tap1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          typeconvert1_tap1 <= typeconvert1_tap0;
        end
      end
    end



  assign a3mul1 = typeconvert1_tap1 * coeff_a3_section1;



  assign a1sum1_cast2 = {{8{a3mul1[31]}}, a3mul1};



  // coeff_b2_section1
  always @(posedge clk)
    begin : delay_process_section1_tap0_process
      if (reset == 1'b1) begin
        typeconvert1_tap0 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          typeconvert1_tap0 <= typeconvert1;
        end
      end
    end



  assign a2mul1 = typeconvert1_tap0 * coeff_a2_section1;



  assign a2sum1_cast2 = {{8{a2mul1[31]}}, a2mul1};



  assign Sub_sub_cast = {inputconv1[39], inputconv1};
  assign Sub_sub_cast_1 = {a2sum1_cast2[39], a2sum1_cast2};
  assign a2sum1_temp = Sub_sub_cast - Sub_sub_cast_1;



  assign a2sum1 = a2sum1_temp[39:0];



  assign Sub1_sub_cast = {a2sum1[39], a2sum1};
  assign Sub1_sub_cast_1 = {a1sum1_cast2[39], a1sum1_cast2};
  assign a1sum1_temp = Sub1_sub_cast - Sub1_sub_cast_1;



  assign a1sum1 = a1sum1_temp[39:0];



  assign typeconvert1 = a1sum1[29:14] + $signed({1'b0, a1sum1[13] & (a1sum1[14] | (|a1sum1[12:0]))});



  // coeff_b1_section1
  assign b1mul1 = {{2{typeconvert1[15]}}, {typeconvert1, 14'b00000000000000}};



  assign b1multypeconvert1 = {{8{b1mul1[31]}}, b1mul1};



  always @(posedge clk)
    begin : delayMatch_process
      if (reset == 1'b1) begin
        delayMatch_reg[0] <= 40'sh0000000000;
        delayMatch_reg[1] <= 40'sh0000000000;
      end
      else begin
        if (enb) begin
          delayMatch_reg[0] <= delayMatch_reg_next[0];
          delayMatch_reg[1] <= delayMatch_reg_next[1];
        end
      end
    end

  assign b1multypeconvert1_1 = delayMatch_reg[1];
  assign delayMatch_reg_next[0] = b1multypeconvert1;
  assign delayMatch_reg_next[1] = delayMatch_reg[0];



  assign kconst = 16'sb1100000000000000;



  always @(posedge clk)
    begin : HwModeRegister8_process
      if (reset == 1'b1) begin
        kconst_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          kconst_1 <= kconst;
        end
      end
    end



  always @(posedge clk)
    begin : HwModeRegister9_process
      if (reset == 1'b1) begin
        delay_section1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          delay_section1_1 <= typeconvert1_tap1;
        end
      end
    end



  // coeff_b3_section1
  assign b3mul1 = kconst_1 * delay_section1_1;



  always @(posedge clk)
    begin : PipelineRegister4_process
      if (reset == 1'b1) begin
        b3mul1_1 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          b3mul1_1 <= b3mul1;
        end
      end
    end



  assign adder_add_cast = {{8{b3mul1_1[31]}}, b3mul1_1};
  assign b1sum1 = b1multypeconvert1_1 + adder_add_cast;



  assign section_result1 = b1sum1[33:18] + $signed({1'b0, b1sum1[17] & (b1sum1[18] | (|b1sum1[16:0]))});



  always @(posedge clk)
    begin : HwModeRegister2_process
      if (reset == 1'b1) begin
        section_result1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          section_result1_1 <= section_result1;
        end
      end
    end



  assign scaleconst2 = 16'sb0100111100111001;



  always @(posedge clk)
    begin : HwModeRegister3_process
      if (reset == 1'b1) begin
        scaleconst2_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          scaleconst2_1 <= scaleconst2;
        end
      end
    end



  assign scale2 = section_result1_1 * scaleconst2_1;



  always @(posedge clk)
    begin : PipelineRegister1_process
      if (reset == 1'b1) begin
        scale2_1 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          scale2_1 <= scale2;
        end
      end
    end



  assign scale2_2 = {scale2_1, 2'b00};



  assign scaletypeconvert2 = scale2_2[33:18] + $signed({1'b0, scale2_2[17] & (scale2_2[18] | (|scale2_2[16:0]))});



  assign inputconv2 = {{11{scaletypeconvert2[15]}}, {scaletypeconvert2, 13'b0000000000000}};



  assign coeff_a2_section2 = 16'sb1001100000101001;



  assign coeff_a3_section2 = 16'sb0011111110001000;



  always @(posedge clk)
    begin : delay_process_section2_tap1_process
      if (reset == 1'b1) begin
        typeconvert2_tap1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          typeconvert2_tap1 <= typeconvert2_tap0;
        end
      end
    end



  assign a3mul2 = typeconvert2_tap1 * coeff_a3_section2;



  assign a1sum2_cast2 = {{8{a3mul2[31]}}, a3mul2};



  // coeff_b2_section2
  always @(posedge clk)
    begin : delay_process_section2_tap0_process
      if (reset == 1'b1) begin
        typeconvert2_tap0 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          typeconvert2_tap0 <= typeconvert2;
        end
      end
    end



  assign a2mul2 = typeconvert2_tap0 * coeff_a2_section2;



  assign a2sum2_cast2 = {{8{a2mul2[31]}}, a2mul2};



  assign Sub2_sub_cast = {inputconv2[39], inputconv2};
  assign Sub2_sub_cast_1 = {a2sum2_cast2[39], a2sum2_cast2};
  assign a2sum2_temp = Sub2_sub_cast - Sub2_sub_cast_1;



  assign a2sum2 = a2sum2_temp[39:0];



  assign Sub3_sub_cast = {a2sum2[39], a2sum2};
  assign Sub3_sub_cast_1 = {a1sum2_cast2[39], a1sum2_cast2};
  assign a1sum2_temp = Sub3_sub_cast - Sub3_sub_cast_1;



  assign a1sum2 = a1sum2_temp[39:0];



  assign typeconvert2 = a1sum2[29:14] + $signed({1'b0, a1sum2[13] & (a1sum2[14] | (|a1sum2[12:0]))});



  // coeff_b1_section2
  assign b1mul2 = {{2{typeconvert2[15]}}, {typeconvert2, 14'b00000000000000}};



  assign b1multypeconvert2 = {{8{b1mul2[31]}}, b1mul2};



  always @(posedge clk)
    begin : delayMatch1_process
      if (reset == 1'b1) begin
        delayMatch1_reg[0] <= 40'sh0000000000;
        delayMatch1_reg[1] <= 40'sh0000000000;
      end
      else begin
        if (enb) begin
          delayMatch1_reg[0] <= delayMatch1_reg_next[0];
          delayMatch1_reg[1] <= delayMatch1_reg_next[1];
        end
      end
    end

  assign b1multypeconvert2_1 = delayMatch1_reg[1];
  assign delayMatch1_reg_next[0] = b1multypeconvert2;
  assign delayMatch1_reg_next[1] = delayMatch1_reg[0];



  assign kconst_2 = 16'sb1100000000000000;



  always @(posedge clk)
    begin : HwModeRegister10_process
      if (reset == 1'b1) begin
        kconst_3 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          kconst_3 <= kconst_2;
        end
      end
    end



  always @(posedge clk)
    begin : HwModeRegister11_process
      if (reset == 1'b1) begin
        delay_section2_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          delay_section2_1 <= typeconvert2_tap1;
        end
      end
    end



  // coeff_b3_section2
  assign b3mul2 = kconst_3 * delay_section2_1;



  always @(posedge clk)
    begin : PipelineRegister5_process
      if (reset == 1'b1) begin
        b3mul2_1 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          b3mul2_1 <= b3mul2;
        end
      end
    end



  assign adder1_add_cast = {{8{b3mul2_1[31]}}, b3mul2_1};
  assign b1sum2 = b1multypeconvert2_1 + adder1_add_cast;



  assign section_result2 = b1sum2[33:18] + $signed({1'b0, b1sum2[17] & (b1sum2[18] | (|b1sum2[16:0]))});



  always @(posedge clk)
    begin : HwModeRegister4_process
      if (reset == 1'b1) begin
        section_result2_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          section_result2_1 <= section_result2;
        end
      end
    end



  assign scaleconst3 = 16'sb0100111011010000;



  always @(posedge clk)
    begin : HwModeRegister5_process
      if (reset == 1'b1) begin
        scaleconst3_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          scaleconst3_1 <= scaleconst3;
        end
      end
    end



  assign scale3 = section_result2_1 * scaleconst3_1;



  always @(posedge clk)
    begin : PipelineRegister2_process
      if (reset == 1'b1) begin
        scale3_1 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          scale3_1 <= scale3;
        end
      end
    end



  assign scale3_2 = {scale3_1, 2'b00};



  assign scaletypeconvert3 = scale3_2[33:18] + $signed({1'b0, scale3_2[17] & (scale3_2[18] | (|scale3_2[16:0]))});



  assign inputconv3 = {{11{scaletypeconvert3[15]}}, {scaletypeconvert3, 13'b0000000000000}};



  assign coeff_a2_section3 = 16'sb1001100110100110;



  assign coeff_a3_section3 = 16'sb0011111011011011;



  always @(posedge clk)
    begin : delay_process_section3_tap1_process
      if (reset == 1'b1) begin
        typeconvert3_tap1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          typeconvert3_tap1 <= typeconvert3_tap0;
        end
      end
    end



  assign a3mul3 = typeconvert3_tap1 * coeff_a3_section3;



  assign a1sum3_cast2 = {{8{a3mul3[31]}}, a3mul3};



  // coeff_b2_section3
  always @(posedge clk)
    begin : delay_process_section3_tap0_process
      if (reset == 1'b1) begin
        typeconvert3_tap0 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          typeconvert3_tap0 <= typeconvert3;
        end
      end
    end



  assign a2mul3 = typeconvert3_tap0 * coeff_a2_section3;



  assign a2sum3_cast2 = {{8{a2mul3[31]}}, a2mul3};



  assign Sub4_sub_cast = {inputconv3[39], inputconv3};
  assign Sub4_sub_cast_1 = {a2sum3_cast2[39], a2sum3_cast2};
  assign a2sum3_temp = Sub4_sub_cast - Sub4_sub_cast_1;



  assign a2sum3 = a2sum3_temp[39:0];



  assign Sub5_sub_cast = {a2sum3[39], a2sum3};
  assign Sub5_sub_cast_1 = {a1sum3_cast2[39], a1sum3_cast2};
  assign a1sum3_temp = Sub5_sub_cast - Sub5_sub_cast_1;



  assign a1sum3 = a1sum3_temp[39:0];



  assign typeconvert3 = a1sum3[29:14] + $signed({1'b0, a1sum3[13] & (a1sum3[14] | (|a1sum3[12:0]))});



  // coeff_b1_section3
  assign b1mul3 = {{2{typeconvert3[15]}}, {typeconvert3, 14'b00000000000000}};



  assign b1multypeconvert3 = {{8{b1mul3[31]}}, b1mul3};



  always @(posedge clk)
    begin : delayMatch2_process
      if (reset == 1'b1) begin
        delayMatch2_reg[0] <= 40'sh0000000000;
        delayMatch2_reg[1] <= 40'sh0000000000;
      end
      else begin
        if (enb) begin
          delayMatch2_reg[0] <= delayMatch2_reg_next[0];
          delayMatch2_reg[1] <= delayMatch2_reg_next[1];
        end
      end
    end

  assign b1multypeconvert3_1 = delayMatch2_reg[1];
  assign delayMatch2_reg_next[0] = b1multypeconvert3;
  assign delayMatch2_reg_next[1] = delayMatch2_reg[0];



  assign kconst_4 = 16'sb1100000000000000;



  always @(posedge clk)
    begin : HwModeRegister12_process
      if (reset == 1'b1) begin
        kconst_5 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          kconst_5 <= kconst_4;
        end
      end
    end



  always @(posedge clk)
    begin : HwModeRegister13_process
      if (reset == 1'b1) begin
        delay_section3_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          delay_section3_1 <= typeconvert3_tap1;
        end
      end
    end



  // coeff_b3_section3
  assign b3mul3 = kconst_5 * delay_section3_1;



  always @(posedge clk)
    begin : PipelineRegister6_process
      if (reset == 1'b1) begin
        b3mul3_1 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          b3mul3_1 <= b3mul3;
        end
      end
    end



  assign adder2_add_cast = {{8{b3mul3_1[31]}}, b3mul3_1};
  assign b1sum3 = b1multypeconvert3_1 + adder2_add_cast;



  assign section_result3 = b1sum3[33:18] + $signed({1'b0, b1sum3[17] & (b1sum3[18] | (|b1sum3[16:0]))});



  always @(posedge clk)
    begin : HwModeRegister6_process
      if (reset == 1'b1) begin
        section_result3_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          section_result3_1 <= section_result3;
        end
      end
    end



  assign scaleconst4 = 16'sb0100111011010000;



  always @(posedge clk)
    begin : HwModeRegister7_process
      if (reset == 1'b1) begin
        scaleconst4_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          scaleconst4_1 <= scaleconst4;
        end
      end
    end



  assign scale4 = section_result3_1 * scaleconst4_1;



  always @(posedge clk)
    begin : PipelineRegister3_process
      if (reset == 1'b1) begin
        scale4_1 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          scale4_1 <= scale4;
        end
      end
    end



  assign scale4_2 = {scale4_1, 2'b00};



  assign scaletypeconvert4 = scale4_2[33:18] + $signed({1'b0, scale4_2[17] & (scale4_2[18] | (|scale4_2[16:0]))});



  assign inputconv4 = {{11{scaletypeconvert4[15]}}, {scaletypeconvert4, 13'b0000000000000}};



  assign coeff_a2_section4 = 16'sb1001100100010101;



  assign coeff_a3_section4 = 16'sb0011111011011110;



  always @(posedge clk)
    begin : delay_process_section4_tap1_process
      if (reset == 1'b1) begin
        typeconvert4_tap1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          typeconvert4_tap1 <= typeconvert4_tap0;
        end
      end
    end



  assign a3mul4 = typeconvert4_tap1 * coeff_a3_section4;



  assign a1sum4_cast2 = {{8{a3mul4[31]}}, a3mul4};



  // coeff_b2_section4
  always @(posedge clk)
    begin : delay_process_section4_tap0_process
      if (reset == 1'b1) begin
        typeconvert4_tap0 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          typeconvert4_tap0 <= typeconvert4;
        end
      end
    end



  assign a2mul4 = typeconvert4_tap0 * coeff_a2_section4;



  assign a2sum4_cast2 = {{8{a2mul4[31]}}, a2mul4};



  assign Sub6_sub_cast = {inputconv4[39], inputconv4};
  assign Sub6_sub_cast_1 = {a2sum4_cast2[39], a2sum4_cast2};
  assign a2sum4_temp = Sub6_sub_cast - Sub6_sub_cast_1;



  assign a2sum4 = a2sum4_temp[39:0];



  assign Sub7_sub_cast = {a2sum4[39], a2sum4};
  assign Sub7_sub_cast_1 = {a1sum4_cast2[39], a1sum4_cast2};
  assign a1sum4_temp = Sub7_sub_cast - Sub7_sub_cast_1;



  assign a1sum4 = a1sum4_temp[39:0];



  assign typeconvert4 = a1sum4[29:14] + $signed({1'b0, a1sum4[13] & (a1sum4[14] | (|a1sum4[12:0]))});



  // coeff_b1_section4
  assign b1mul4 = {{2{typeconvert4[15]}}, {typeconvert4, 14'b00000000000000}};



  assign b1multypeconvert4 = {{8{b1mul4[31]}}, b1mul4};



  always @(posedge clk)
    begin : delayMatch3_process
      if (reset == 1'b1) begin
        delayMatch3_reg[0] <= 40'sh0000000000;
        delayMatch3_reg[1] <= 40'sh0000000000;
      end
      else begin
        if (enb) begin
          delayMatch3_reg[0] <= delayMatch3_reg_next[0];
          delayMatch3_reg[1] <= delayMatch3_reg_next[1];
        end
      end
    end

  assign b1multypeconvert4_1 = delayMatch3_reg[1];
  assign delayMatch3_reg_next[0] = b1multypeconvert4;
  assign delayMatch3_reg_next[1] = delayMatch3_reg[0];



  assign kconst_6 = 16'sb1100000000000000;



  always @(posedge clk)
    begin : HwModeRegister14_process
      if (reset == 1'b1) begin
        kconst_7 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          kconst_7 <= kconst_6;
        end
      end
    end



  always @(posedge clk)
    begin : HwModeRegister15_process
      if (reset == 1'b1) begin
        delay_section4_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          delay_section4_1 <= typeconvert4_tap1;
        end
      end
    end



  // coeff_b3_section4
  assign b3mul4 = kconst_7 * delay_section4_1;



  always @(posedge clk)
    begin : PipelineRegister7_process
      if (reset == 1'b1) begin
        b3mul4_1 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          b3mul4_1 <= b3mul4;
        end
      end
    end



  assign adder3_add_cast = {{8{b3mul4_1[31]}}, b3mul4_1};
  assign b1sum4 = b1multypeconvert4_1 + adder3_add_cast;



  assign output_typeconvert = b1sum4[33:16] + $signed({1'b0, b1sum4[15] & (b1sum4[16] | (|b1sum4[14:0]))});



  assign Out = output_typeconvert;

  assign ce_out = clk_enable;

endmodule  // butterbp

